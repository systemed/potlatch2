<?xml version="1.0" encoding="utf-8"?>
<!---
    The History Dialog displays information about the history of an entity. As well as showing the different versions
    of the entity, it displays synthetic history based on its children. For example, the intermediate states
    of a way while the nodes are rearranged are shown.
-->
<s:TitleWindow
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:help="net.systemeD.potlatch2.help.*"
        title="History for {entity.getType()} {entity.id}"
        width="640" height="400">

  <s:layout>
    <s:VerticalLayout />
  </s:layout>

  <s:VGroup width="100%" height="100%">
    <s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle" paddingTop="5">
      <s:RichText text="Loading data..." visible="{ entityStates.length == 0 }" />
    </s:HGroup>
      <s:DataGrid dataProvider="{entityStates}" width="100%" height="100%" enabled="{ entityStates != null }">
        <s:columns>
          <s:ArrayList>
            <s:GridColumn editable="false" dataField="version" headerText="Version" width="60">
              <s:itemRenderer>
                <fx:Component>
                  <s:DefaultGridItemRenderer textAlign="center" />
                </fx:Component>
              </s:itemRenderer>
            </s:GridColumn>
            <s:GridColumn editable="false" dataField="timestamp" headerText="Date" />
            <s:GridColumn editable="false" dataField="diff" headerText="Changes" width="200" showDataTips="true" />
            <s:GridColumn editable="false">
              <s:itemRenderer><fx:Component><s:GridItemRenderer>
                <s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
                  <s:Label text="{data.user}" 
                      color="0x336699"  textDecoration="underline" buttonMode="true" 
                      click="parentDocument.parentDocument.userPage(data.user)"/>
                </s:VGroup>
              </s:GridItemRenderer></fx:Component></s:itemRenderer>
            </s:GridColumn>
            <s:GridColumn editable="false" dataField="comment" headerText="Comment" width="200" showDataTips="true" />
          </s:ArrayList>
        </s:columns>
      </s:DataGrid>
  </s:VGroup>


  <s:controlBarContent>
    <!-- <s:Button label="Revert" enabled="false" styleName="titleWindowButton" /> -->
    <s:Spacer width="100%"/>
    <s:Button label="More Details..." enabled="{entity.id >= 0}" click="openEntityPage()" styleName="titleWindowButton" />
    <s:Button label="Cancel" click="PopUpManager.removePopUp(this);" styleName="titleWindowButton" />
  </s:controlBarContent>

  <fx:Script><![CDATA[

    import mx.managers.PopUpManager;
    import mx.core.Application;
    import mx.core.FlexGlobals;
    import mx.events.CloseEvent;
    import flash.events.Event;
    import com.adobe.utils.ArrayUtil;

    import net.systemeD.halcyon.connection.*

    // This is the entity that we're requesting the history for.
    [Bindable]
    private var entity:Entity;

    // These are the various states that the entity as been in - so is a list
    // of Nodes (all with the same id) or Ways etc
    [Bindable]
    private var entityStates:ArrayList = new ArrayList();

    // store intermediate states
    private var entityStateList:Array; // an array of objects
    private var wayNodeStates:Array; // an array of arrays of nodes

    /** Changesets used in the history. */
    private var changesets:Array=[];
    private var pendingChangesetFetches:uint;

    // the number of outstanding asynchronous node history requests,
    // so we know when all have been fetched
    private var pendingNodeFetches:uint;

    public function init(e:Entity):void {
        if (e == null) {return;}

        PopUpManager.addPopUp(this, Application(FlexGlobals.topLevelApplication), true);
        PopUpManager.centerPopUp(this);
        this.addEventListener(CloseEvent.CLOSE, historyDialog_close);

        entity = e;
        fetchHistory();
    }

    private function historyDialog_close(evt:CloseEvent):void {
        PopUpManager.removePopUp(this);
    }

    /** Open up a new browser page showing OSM's view of the current entity. */
    private function openEntityPage():void {
        if (entity != null && entity.id >= 0) {
            // This is slightly hard-coded, but not drastically. The ../s could be changed for string manipulation of the apiBase
            var urlBase:String = entity.connection.apiBase + '../../browse/';
            navigateToURL(new URLRequest(urlBase+entity.getType()+'/'+entity.id), "potlatch_browse");
        }
    }

    private function fetchHistory():void {
        if (entity is Node) {
            entity.connection.fetchHistory(entity, processNode);
        } else if (entity is Way) {
            entity.connection.fetchHistory(entity, processWay);
        } else {
            // not implemented
        }
    }

	private function processNode(results:Array):void {
		entityStateList = results;
		for each(var node:Node in results) {
			changesets.push(node.lastChangeset);
		}
		fetchChangesets();
	}
	
	private function displayNodeResults(e:Event):void {
		var arr:Array=[];
		var oldNode:Node;
		for each (var node:Node in entityStateList) {
			var changes:Array=[];
			if (node.version==1) {
				changes.push("Created");
				for (var k:String in node.getTagsHash()) { changes.push(k+"="+node.getTag(k)); }
			} else {
				if (node.lat!=oldNode.lat || node.lon!=oldNode.lon) changes.push("Moved");
				diffTags(oldNode,node,changes);
				// do something with visible?
			}
			arr.push({
				version: node.version,
				timestamp: node.timestamp.replace('T',' ').replace('Z',''),
				user: node.user,
				diff: changes.length==0 ? "None" : changes.join('; '),
				comment: entity.connection.getChangeset(node.lastChangeset).comment
			});
			oldNode=node;
		}
        entityStates.source = arr.reverse();
    }

	/** Describe tag differences between two objects. */
	private function diffTags(oldObj:Entity,newObj:Entity,changes:Array):void {
		var k:String;
		for (k in oldObj.getTagsHash()) {
			// - if old tag not in new, add "Deleted"
			if (!newObj.getTag(k)) { changes.push("Deleted "+k); }
			// - if old tag in new but different, add "Changed"
			else if (newObj.getTag(k)!=oldObj.getTag(k)) { changes.push("Changed "+k+"="+newObj.getTag(k)); }
		}
		for (k in newObj.getTagsHash()) {
			// - if new tag not in old, add "Added"
			if (!oldObj.getTag(k)) { changes.push("Added "+k+"="+newObj.getTag(k)); }
		}
	}

    private function processWay(results:Array):void {
        // This is much more complicated that nodes.
        // In potlatch(2) we show the user the number of different states, bearing in mind
        // node movements (and tag changes?).

        entityStateList = results;

        // figure out the list of nodes that have ever been involved in the way, and fetch them.
        // pendingNode will store each one, and trigger an event when they are all downloaded.
        wayNodeStates = [];
        addEventListener("pendingNodesAllFetched", fetchChangesets);

        var nodes:Object = {};
        var count:uint = 0;

        for each(var oldWay:Way in results) {
            for (var i:uint = 0; i< oldWay.length; i++) {
                var node:Node = oldWay.getNode(i);
                if(!nodes[node.id]) {
                    nodes[node.id] = node;
                    count++;
                }
            }
            changesets.push(oldWay.lastChangeset);
        }

        pendingNodeFetches = count;

        for each (var n:Node in nodes) {
            entity.connection.fetchHistory(n, pendingNode);
        }
    }

    // Callback for fetching a node history as part of a way; when there's no outstanding
    // nodes remaining this will trigger an event.
    private function pendingNode(results:Array):void {
        wayNodeStates.push(results)
        for each (var n:Node in results) changesets.push(n.lastChangeset);
        pendingNodeFetches--;
        if (pendingNodeFetches == 0) {
            dispatchEvent(new Event("pendingNodesAllFetched"));
        }
    }

	/** Work out which changesets were used, and fetch details for all of them. */
	private function fetchChangesets(e:Event=null):void {
		changesets=ArrayUtil.createUniqueCopy(changesets);
		pendingChangesetFetches=changesets.length;
		entity.connection.addEventListener(Connection.LOAD_COMPLETED, pendingChangeset);
		for each (var id:Number in changesets) entity.connection.loadEntityByID("changeset",id);
        addEventListener("pendingChangesetsAllFetched", (entity is Way) ? processWayStates : displayNodeResults);
	}
	
	private function pendingChangeset(e:Event):void {
        pendingChangesetFetches--;
        if (pendingChangesetFetches == 0) dispatchEvent(new Event("pendingChangesetsAllFetched"));
	}

    private function processWayStates(e:Event):void {
        // we now have all the node histories for
        // for each node that has ever been part of the way.

        // Build a list of every timestamp of interest, along with who
        // the person was that triggered that timestamp (either from a way version
        // change, or from changing a node.
        var revdates:Array = [];
        var revusers:Object = {};
        var revdiffs:Object = {};
		var revchangesets:Object = {};

        var oldWay:Way;
        for each (var way:Way in entityStateList) {
            // assemble diff
            var changes:Array=[];
            if (way.version==1) {
                changes.push("Created");
                for (var k:String in way.getTagsHash()) { changes.push(k+"="+way.getTag(k)); }
            } else {
                var oldNodes:Array=oldWay.nodeList;
                var nodes:Array=way.nodeList;
                if (!ArrayUtil.arraysAreEqual(oldNodes,nodes)) {
                    if      (includes(oldNodes,nodes)) { changes.push("Shortened"); }
                    else if (includes(nodes,oldNodes)) { changes.push("Extended"); }
                    else if (ArrayUtil.arraysAreEqual(oldNodes,nodes.reverse())) { changes.push("Reversed"); }
                    else { changes.push("Nodes changed"); }
                }
                diffTags(oldWay,way,changes);
            }

            // push entity state
            revdates.push(way.timestamp);
            revdiffs[way.timestamp] = changes;
            revusers[way.timestamp] = way.user;
            revchangesets[way.timestamp] = entity.connection.getChangeset(way.lastChangeset);
            oldWay=way;
        }

        for each (var nodeStates:Array in wayNodeStates) {
            for each (var node:Node in nodeStates) {
                revdates.push(node.timestamp);
                revusers[node.timestamp] = node.user;
                revchangesets[node.timestamp] = entity.connection.getChangeset(node.lastChangeset);
                addRevDiff(revdiffs,node.timestamp,"(Node edit)");
            }
        }

        // sort the dates and remove duplicates and those before the first version of the way

        revdates = revdates.sort();
        revdates = ArrayUtil.createUniqueCopy(revdates); // (corelib) de-duplicates
        revdates = revdates.filter(function(e:*, i:int, arr:Array):Boolean { return e >= entityStateList[0].timestamp});

        var version:int = 1;
        var subversion:int = 0;
        var es:Array = []; // entityStates

        for each (var revdate:String in revdates) {
          var entitystate:Object = {};

          var w:Way = getEntityAtDate(entityStateList, revdate) as Way;

          if (w.version == version) {
              subversion++;
          } else {
              version = w.version;
              subversion = 1;
          }

          //for (i = 0, i < w.length; i++) {
          //    var generalNode:Node = w.getNode(i);
          //    var specificNode:Node = getEntityAtDate(wayNodeStates[generalNode.id], revdate);
          //    where was I going with this? Oh, yes, it'll be needed for building the object to revert to.
          //}

          es.push({
              version: String(version) + "." + String(subversion),
              timestamp: revdate.replace('T',' ').replace('Z',''),
              user: revusers[revdate],
              diff: revdiffs[revdate].length==0 ? "None" : revdiffs[revdate].join('; '),
              comment: revchangesets[revdate].comment
          });
        }

        entityStates.source = es.reverse();
    }

	/** Add a diff description to the hash for a given timestamp, unless it's a dupe. */
	private function addRevDiff(revdiffs:Object,timestamp:String,diff:String):void {
		if (!revdiffs[timestamp]) { revdiffs[timestamp]=[diff]; return; }
		if (revdiffs[timestamp].indexOf(diff)>-1) return;
		revdiffs[timestamp].push(diff);
	}

	/** Find out whether one array is a subscript of another.
	    Bit of a hack, but will be fine as long as the array generates unique toString()s with no # in them! */
	private function includes(array1:Array,array2:Array):Boolean {
		if (array1.length<array2.length) return false;
		return (array1.join('#').indexOf(array2.join('#'))>-1);
	}

    /** Given a list of entities sorted with oldest first, find the last version before that date. */
    private function getEntityAtDate(list:Array, date:String):Entity {
        for(var i:int = list.length-1; i >= 0; i--) {
            var entity:Entity = list[i];
            if (entity.timestamp <= date) {
                return entity;
            }
        }
        return null;
    }

    public function userPage(user:String):void {
        if (user) {
            var urlBase:String = entity.connection.apiBase + '../../user/';
            navigateToURL(new URLRequest(urlBase+user), "potlatch_user");
        }
    }
    ]]>
  </fx:Script>


</s:TitleWindow>


