<?xml version="1.0" encoding="utf-8"?>
<!---
    The Background Panel displays details about the background feature selected. It is currently only used
    by the SnapshotConnection, and so has functionality to allow marking features as "complete".
-->

<mx:VBox
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:s="library://ns.adobe.com/flex/spark"
    height="100%">
  <s:VGroup width="100%">
    <s:RichText width="100%" id="backgroundPanelText" text="You have selected a Background Feature." />
    <s:RichText text="{connectionName}" />
  </s:VGroup>
  <mx:DataGrid editable="false" id="backgroundPanelDG" width="100%" height="50%">
    <mx:columns>
      <mx:DataGridColumn editable="false" dataField="key" headerText="key" />
      <mx:DataGridColumn editable="false" dataField="value" headerText="value" />
    </mx:columns>
  </mx:DataGrid>
  <s:VGroup width="100%">
    <s:RichText width="100%">You can see a side-by-side tagging comparison by ctrl+clicking a feature on the main layer.</s:RichText>
  </s:VGroup>
  <mx:ViewStack id="statusStack" resizeToContent="true" width="100%">
    <mx:VBox id="empty" />
    <mx:VBox id="not_complete" width="100%">
      <s:VGroup width="100%">
        <s:RichText width="100%">If all the information from this feature is accounted for in the main layer, you can mark this feature as 'complete'.</s:RichText>
        <s:RichText width="100%">This lets other contributors see what still needs reconciling.</s:RichText>
        <s:Button label="Mark feature as Complete" click="markComplete()"/>
      </s:VGroup>
    </mx:VBox>
    <mx:VBox id="complete" width="100%">
      <s:VGroup width="100%">
        <s:RichText width="100%">This feature has been marked as 'complete'. If this is incorrect, and there is still reconciling required, you can mark this feature as 'not complete'.</s:RichText>
        <s:Button label="Mark feature as Not complete" click="markNotComplete()"/>
      </s:VGroup>
    </mx:VBox>
  </mx:ViewStack>
  <fx:Script><![CDATA[

      import net.systemeD.halcyon.connection.*;
      import net.systemeD.potlatch2.utils.SnapshotConnection;
      import mx.collections.*;

      private var selectedEntity:Entity;
      private var tagDataProvider:ArrayCollection;
      [Bindable]
      private var connectionName:String;

      public function init(entity:Entity):void {
          if ( tagDataProvider == null ) {
              tagDataProvider = new ArrayCollection();
              backgroundPanelDG.dataProvider = tagDataProvider;
          }

          selectedEntity=entity;
          selectedEntity.addEventListener(Connection.STATUS_CHANGED, statusEvent, false, 0, true);
          connectionName = selectedEntity.connection.name;
          setStatusStack();
          updateTagDataProvider();
      }

      private function updateTagDataProvider():void {
          tagDataProvider.removeAll();
          if (selectedEntity==null) { return; }
          var tags:Array = selectedEntity.getTagArray();
          tags.sortOn("key");
          for each(var tag:Tag in tags) { tagDataProvider.addItem(tag); }
      }

      private function statusEvent(e:Event):void {
            setStatusStack();
      }

      private function setStatusStack():void {
          switch (selectedEntity.status) {
              case 'incomplete':
                  statusStack.selectedChild = not_complete;
                  break;
              case 'complete':
                  statusStack.selectedChild = complete;
                  break;
              default:
                  statusStack.selectedChild = empty;
          }
      }

      private function markComplete():void {
          if (selectedEntity.connection is SnapshotConnection) {
              SnapshotConnection(selectedEntity.connection).markComplete(selectedEntity);
          }
      }

      private function markNotComplete():void {
          if (selectedEntity.connection is SnapshotConnection) {
              SnapshotConnection(selectedEntity.connection).markNotComplete(selectedEntity);
          }
      }
      ]]>
  </fx:Script>
</mx:VBox>